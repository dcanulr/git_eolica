---
title: "Intro a Git y Github"
author: "Diego Canul"
format: 
    revealjs:
        slide-number: c
        theme: dark
---
## Version Control System 
Un VCS es un sistema que registra los cambios sobre un archivo o conjunto de archivos, de tal forma que se puede llamar a una versión en específico después.

Usar un VCS generalmente implica que si rompes tus archivos o los pierdes, fácilmente los puedes recuperar.

## Git
Git es un _Distributed Version Control System_ (DVCS), donde se accede a un repositorio que contiene las últimas versiones de los archivos así como su historial completo. Cada _clon_ del repositorio contiene un respaldo completo de toda la información.

## Git {.scrollable}
![](./img/scenario1.png){fig-align="center"}

::: aside
[https://github.com/aspp-latam/2023-mexico-git-and-github](https://github.com/aspp-latam/2023-mexico-git-and-github)
:::

## Git
Verificar la configuración de git
```
git config --global --list
```
Si no hay una credenciales:
```
git config --global user.email "you@example.com"
git config --global user.name "Your Name"
```
## Mi primer repo {.smaller}
1. ``` mkdir git_test ```
1. ``` cd git_test ```
1. ``` git init ```
1. ``` git status ```
1. ``` touch example.txt ```
1. ``` git status ```
1. ``` git add example.txt ```
1. ``` git status ```
1. ``` git commit -m "mensaje del commit" ```

## Mi primer repo
![](./img/error_commit.png){fig-align="center"}

## Mi primer repo {.smaller}
1. ``` mkdir git_test ```
1. ``` cd git_test ```
1. ``` git init ```
1. ``` git status ```
1. ``` touch example.txt ```
1. ``` git status ```
1. ``` git add example.txt ```
1. ``` git status ```
1. ``` git commit -m "mensaje del commit" ```
1. ``` git status ```

## El flujo de trabajo usual
:::{.incremental}
1. ``` git status ```
1. Trabajo normal
1. ``` git status ```
1. ``` git add file ``` ó ``` git commit -a -m "mensaje del commit ```

1. ```git commit -m "mensaje del commit" ```
:::

. . .

### Dos comentarios
1. ``` git add .```?
1. La importancia del mensaje en el commit

## Archivos no deseados
Crea un archivo y un directorio, agregalo a .gitignore


## Regresar al pasado {.scrollable}
EL VCS permite regresar a versiones anteriores, existen varias formas de haceer esto. Sin embargo, los cambios deben realizarse con precaución, en algunos casos los cambios son irreversibles.

Revisar el historial:

1. ``` git log```

No mantener los cambios en la versión actual es decir, desmodificar el archivo (modificar un archivo y revisar el status):

2. ``` git restore```

``` git restore ``` es un **comando peligroso**, cualquier cambio hecho es ignorado. No debe ser usado a menos que estés seguro de no querer guardar los cambios hechos.

[Otros comandos](https://github.com/aspp-latam/2023-mexico-git-and-github/tree/main)

## Github {.smaller}
Es una plataforma online que aloja Git y permite el desarrollo colaborativo

. . .

![](./img/scenario2.png){fig-align="center" width=60%}

## Configuración del SSH {.scrollable}
**En la terminal:**

1. ``` ssh-keygen -t ed25519 -C "tu_correo_en_github@example.com" ``` (enter, enter, enter)
1. ``` eval "$(ssh-agent -s)" ```
1. ``` ssh-add ~/.ssh/id_ed25519 ```
1. ``` cat ~/.ssh/id_ed25519.pub ``` y copiar el output

**En Github:**

1. Ir a Settings
1. Claves SSH y GPG
1. Nueva clave SSH
1. Agregar clave

**Comprobar la conexión en terminal:**

1. ``` ssh -T git@github.com ```
1. :-)

## Clonando un repo
Otra forma de crear un repo es creando uno desde [github.com](github.com) y luego haciendo usando el comando ``` git clone github.com/tu_repo ```.

Puedes clonar un repo y usarlo de manera local o personal, o clonar un repo donde participas en un proyecto.

## Interactuando con github I {.scrollable}
1. Abre el siguiente repo: [https://github.com/dcanulr/git_eolica](https://github.com/dcanulr/git_eolica) y copia el link clone ssh

1. Realiza el clon del repo ``` git clone git@github.com:dcanulr/git_eolica.git```

1. Crea un archivo nombrado "tu_nombre.csv" y actualiza el repo 

1. Una vez hecho el commit local, revisa ``` git status ``` actualiza el repo remoto con ``` git push```

## Interactuando con github II {.scrollable}
1. Si existen cambios hechos en el repo remoto se verán reflejados en el status

1. Para actualizar los cambios remotos utiliza ``` git pull```

1. Trabaja de manera local y realiza el commit [local], y después realiza el push [remoto]

## {.scrollable}
![](./img/scenario3.png)

::: aside
[https://github.com/aspp-latam/2023-mexico-git-and-github](https://github.com/aspp-latam/2023-mexico-git-and-github)
:::

## {.scrollable}
![](./img/scenario5.png)

::: aside
[https://github.com/aspp-latam/2023-mexico-git-and-github](https://github.com/aspp-latam/2023-mexico-git-and-github)
:::
